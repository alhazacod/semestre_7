

# This file was *autogenerated* from the file transf_fourier.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_2 = Integer(2)
from sage.all import *
from sage.symbolic.integration.integral import definite_integral
from sage.calculus.calculus import symbolic_sum
from sympy import fourier_transform

x, p, w = var('x p w', domain = 'real')
assume(w>_sage_const_0 )
assume(p>_sage_const_0 )
N = _sage_const_1   
hbar = var('hbar')
assume(hbar>_sage_const_0 )
#psi_p_x(x) = N * exp(I * (p * x / hbar))
__tmp__=var("x"); psi_p_x = symbolic_expression(N*(cos(p*x/hbar) + I*sin(p*x/hbar))).function(x)

trans1 = integral(N*(cos(p*x/hbar)*exp(-_sage_const_2 *pi*I*x*w)), (x,-oo,oo))
print(f'transf1 {trans1}')
trans2 = integral(N*(I*sin(p*x/hbar)*exp(-_sage_const_2 *pi*I*x*w)), (x,-oo,oo))
print(f'transf2 {trans2}')

__tmp__=var("w"); transformada = symbolic_expression(integral((psi_p_x(x)*exp(-_sage_const_2 *pi*I*x*w)),(x,-oo,oo))).function(w)
print(transformada)

