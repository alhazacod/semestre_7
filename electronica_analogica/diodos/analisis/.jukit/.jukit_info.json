{"cmd": "\ny = I_D.copy()#/max(I_D)\nx = V_D.copy()#/max(V_D)\n\nplt.scatter(x,y)\nplt.xlabel(f'$V_D (V)$', color = \"black\")\nplt.ylabel(f'$I_D (A)$', color = \"black\")\nplt.title('Voltaje vs Corriente de carga', color = \"black\")\nplt.grid()\n\n#Voltaje umbral \nreg_func = lambda x,a,b: a*x+b\ncoef,cov = curve_fit(reg_func, x[15:],y[15:])\na,b = coef\nprint(f'coef. lineal: {coef}')\n\nxx = np.linspace(1.2,1.44,50)\nyy = reg_func(xx,a,b)\n\nplt.plot(xx,yy,c=\"green\",label = f'$({a: .2f}\\pm 0.02)*V_0 + ({b:.2f}\\pm 0.02)$')\n\nreg_func_inv = lambda y,a,b: (y-b)/a\nV_U = reg_func_inv(0,a,b)\nprint(f'V_U = {V_U:.2f}')\n\nplt.scatter([V_U],[0],c='magenta', label = f'$V_U = ({V_U:.2f}\\pm 0.05) [V]$')\n\n#Resistencia Dinamica \n# Es la inversa de la pendiente \nR_D = 1/a\nprint(f'R_D = {R_D:.2f}')\n\n#Resistencia estatica \nR = 100 #ohm\nR_e = R_D+R\nprint(f'R_e = {R_e:.2f}')\n\n\n#Corriente inversa de saturacion \nx = x.copy()/max(x)\ny = y.copy()/max(y)\n\nreg_func = lambda x,a,b: a*(np.exp(b*x)-1)\ncoef,cov = curve_fit(reg_func, x,y)\na,b = coef\nprint(f'coef. exponencial: {coef}')\n\nI_0 = a*max(I_D)\n\nprint(f'I_0 = {I_0: .2e} ')\n\nxx = np.linspace(0,1,50)\nyy = reg_func(xx,a,b)\nplt.plot(xx*max(V_D),yy*max(I_D),c=\"purple\",label = f'$({latex_float(a)}\\pm 0.3)*[e^{{({b:.1f}\\pm 0.7)}}-1]$')\n\n#Constante de boltzman \nq = 1.6e-19 \neta = 1 \nT = 294 \nk_B = q/(eta*b*T)*max(V_D)\nprint(f'k_B = {k_B}')\n\n#Punto Q \nV_S = 1.9\nV_SR = V_S/R\nplt.scatter([V_S,0],[0,V_SR],label = '$(V_S,V_S/R_S)$')\n\nreg_func = lambda x,a,b: a*x+b\ncoef,cov = curve_fit(reg_func, [V_S,0],[0,V_SR])\na,b = coef\nprint(f'coef. exponencial: {coef}')\n\nxx = np.linspace(0,1.9,50)\nyy = reg_func(xx,a,b)\n\nplt.plot(xx,yy)\n\nplt.legend()\nplt.rcParams['axes.facecolor'] = 'white'\nplt.savefig(f'{name}.jpg')", "cmd_opts": " --cell_id=PaOU9xssBN -s", "import_complete": 1, "terminal": "kitty"}